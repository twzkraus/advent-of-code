/*
--- Day 5: Binary Boarding ---
You board your plane only to discover a new problem: you dropped your boarding pass! You aren't sure which seat is yours, and all of the flight attendants are busy with the flood of people that suddenly made it through passport control.

You write a quick program to use your phone's camera to scan all of the nearby boarding passes (your puzzle input); perhaps you can find your seat through process of elimination.

Instead of zones or groups, this airline uses binary space partitioning to seat people. A seat might be specified like FBFBBFFRLR, where F means "front", B means "back", L means "left", and R means "right".

The first 7 characters will either be F or B; these specify exactly one of the 128 rows on the plane (numbered 0 through 127). Each letter tells you which half of a region the given seat is in. Start with the whole list of rows; the first letter indicates whether the seat is in the front (0 through 63) or the back (64 through 127). The next letter indicates which half of that region the seat is in, and so on until you're left with exactly one row.

For example, consider just the first seven characters of FBFBBFFRLR:

Start by considering the whole range, rows 0 through 127.
F means to take the lower half, keeping rows 0 through 63.
B means to take the upper half, keeping rows 32 through 63.
F means to take the lower half, keeping rows 32 through 47.
B means to take the upper half, keeping rows 40 through 47.
B keeps rows 44 through 47.
F keeps rows 44 through 45.
The final F keeps the lower of the two, row 44.
The last three characters will be either L or R; these specify exactly one of the 8 columns of seats on the plane (numbered 0 through 7). The same process as above proceeds again, this time with only three steps. L means to keep the lower half, while R means to keep the upper half.

For example, consider just the last 3 characters of FBFBBFFRLR:

Start by considering the whole range, columns 0 through 7.
R means to take the upper half, keeping columns 4 through 7.
L means to take the lower half, keeping columns 4 through 5.
The final R keeps the upper of the two, column 5.
So, decoding FBFBBFFRLR reveals that it is the seat at row 44, column 5.

Every seat also has a unique seat ID: multiply the row by 8, then add the column. In this example, the seat has ID 44 * 8 + 5 = 357.

Here are some other boarding passes:

BFFFBBFRRR: row 70, column 7, seat ID 567.
FFFBBBFRRR: row 14, column 7, seat ID 119.
BBFFBBFRLL: row 102, column 4, seat ID 820.
As a sanity check, look through your list of boarding passes. What is the highest seat ID on a boarding pass?
*/

const puzzle =`BBFFBFFRRR
FBBFFBBLRR
FFBFBFBRRR
FFFBFBFRRR
BBFFBBFLRR
BFFBFBFLRL
FBBBBBFRRR
FFFFBFFLLR
BFBFFBFLLR
FFBBFFFLRR
BFFFFFFLLL
FBFFBFFRLL
FFBFFBFRLR
FBBBFBFRRR
FBFFBBBRRL
FBFFBFFLRL
BFBBFFFLLL
FBBFBFBRRL
BFFBFFFLRR
FFFFBFFRLR
FFFBBBFRLR
FBFFFBFLLL
BFBFBBBLRR
FBBBFFBRLR
BBFFFFFLLL
BFFFFBFRRL
FBBBFBFRRL
FFBBBFBRLR
FFFFBBFLLL
FBFBFBBRLL
BFFFBFBRLL
FFBFBFBRLR
FBFFFBBRLR
BBFFFBBLRR
BFFBBFFRRL
BFBBBFFRRR
FFBFBFFRRL
FBFBBFBLLR
BFFBFBBRRR
BFFFFBFLLR
FFFBFFFRRR
FBFFFBFRLR
BFBFFBFRLR
FBBBFFFLLR
FBBFFBFLLL
BFBBFBFLLR
FFBFBBFLLL
BFFFBFBLRL
FBBFBBBLLL
FFFBFFBLLR
BFFFFFFRRR
BFBBBBFRRL
FFBFBBFRLL
FBBBFBBLRL
BFFBFBFLRR
BBFFFBFRRL
BFFBBFFLRR
BFBFFFFLLR
FBFBFFFLRR
BFBBFBBLRL
FBFBFFFRLR
FFBBBFFRLR
BBFBBFFRLR
BFFFFBBRLL
FFFBFBBLRR
FFFFBFBRRL
BFFBFBFRRL
FBFFBBBRRR
BFBBFFBLRL
FFBBFFFLLL
FBFBBFBRRR
FBBBFFFLRL
FBBFFBFLRR
FBBBBBFRRL
BFFFBBBLRL
FFFBBFBRLL
FFFFFBBLLR
FFBFBBBRLL
FFBBFBFLLR
FBFBBFFLLL
FFFBFFBRLL
BFBBFBFRLR
BFBFBBFRRL
FFFBFFFLRL
FBBFBBFRLR
BFFBFFBRRL
BBFFFBBRLR
FBBBBBFRLL
FFBBFFFRLL
BBFBFBBRLR
FFBBBFFLLR
BFBBBBBLLL
FFFBFBBLLL
FBFFBFFRRL
FBFBFFBLLL
BFFBBBFRRL
FBBBBBFLLL
FBFBBFBLRR
FFBBBBFLLR
BBFFBFFRRL
FBBBBBFLRR
FBFFFFFRLR
FBFFBBFLLR
FFBBBFBLRR
BFFFBBBRRL
FBFBFBFRRL
FFFBFBBRLL
FFBFBFBLRL
FBBBFBBLLL
FBBBFBFLRL
FBBBBFFLRL
FBFBBBBRLR
FBBFFBFLLR
FBFFBBFLRR
FBFFFBBLLL
BBFFBBFRRR
FBBFBBBRLL
BFFBBBFLLR
FBFFFFFLRR
FBFFBBFRRL
BFFBBFBLLL
FBBBFBBLLR
FBBBBFBLRL
FBBBFFFRRR
FFFFBBFRRR
BFBFFFFRRR
BFBFFBBLRL
BFFFFFBLLR
BFBBFFFRRR
FBFFFBFRRL
BFFBBFFLRL
FFFBFFBRRL
FFBFBFBLLL
FFBFBFFLLL
BBFFFBBRRR
FFFFFBFLRL
BFBFFFBLRL
BFBFBFFLRR
BFFBBBBRLL
BFFFBFFRRR
BBFBFFBRLL
FBFFFBBRRL
FFBBFBBRRL
FFBFFFFLLR
FFFBFFFLLL
FBBFFBBLRL
BFBFBBFLLR
FBFBFFFRRL
BBFFFFFLRR
BBFFFBFLRL
BBFFBBBLLL
BFBBFBFLLL
BFBFFBFRRL
FBFFFFBRRL
FBFFBBBRLR
BFBBFBBRLL
BFFBBFFLLR
FBBBFFBLRL
BFFFBFFRLR
FFFBFFBRLR
BFFBBBFLLL
FBBBBFFRLL
FFFFBBBRLR
FBFFBFFLRR
FBFBFBBRRL
FFFFFFBRRR
FFFBBBFLRL
FBFFBFBLLR
FFFBBBBLRL
BBFBFFBLLL
FBFFFFBLLR
BBFBFBBRRR
BFBFFFBRRR
FBBFBFFRLL
FBBBBFFRLR
FFBBFBBLRL
BBFBFFBLLR
FBBBBBBLRL
BFFFBBFLLL
BBFBBFFLLR
FBFFBFBLRL
BFFFBBBLRR
BBFFFFFRRR
BFBFBBBRLR
BBFFFBFLRR
FBBFBBFLLR
BBFBFFBLRR
BFBBBFFLRR
FBBFBFFRRL
FBFBFBBLRR
BFBBFFBRLL
FFFBBFBRLR
BFFBBBFRRR
FBFFBFFRLR
FFFBBBBRLL
FFFFFBBRLR
FBBFBFBLLR
FBBFBBFLRR
BBFFBBFLLR
FFFBFBBLLR
FFBFBFFLRR
BFBBFBFRLL
BFFFFBFRRR
BBFBFFFLRL
BFFFFBFLLL
FBFBFBFLRL
BFBBFBBLLR
BFFBFFFRLL
BBFBFFFRLR
BBFFBFFRLL
FFFBFBBRLR
FBFBBBFLRL
FFBFFBBRLR
BBFFFBBLRL
BFBBBBFLRR
FFBFFFBLRL
FFBBBFBRLL
BBFFBFFLRR
BBFFBFFRLR
FFFFFBFRRR
BBFBFBBLRL
BFFBBBBLLL
FBBBBFBRRR
FFBBBBBLRL
FBBFBBFRRR
FFBBFFBRLL
BFBFBFBLRR
BBFBFFFRRR
BFFFBBFRRR
FBFBFFFLLL
FBBFBFBRRR
BBFFBFBLLR
BBFBFBFLRR
BFFFFBBLRL
BFBBBFFLRL
BBFBFFBLRL
BFFBBFFRLL
FBFFBFFLLR
FBFBFBBLLL
BBFBFBFLRL
BBFFBBBLRL
FFFFFBBRLL
FFFBBBBRRR
FFBBFFFRLR
FFBFFFBRRR
FBFBFFBLRR
FFBFFBBLLL
FBBFBBFLRL
FBFFBBBLRL
FBBBBFFRRR
BFBBBBBLLR
FFBFBBBLRR
FFFFBFBLRR
BFFFFFFRLL
FBBFFFBLRR
BFBBBBBRLL
FFBBFFBLRL
BFBBBFFRLR
FFBFFBFLLL
FFBBFBFRLR
BFBFFBBLRR
FFFFBFFLRR
FFBFFBFLRL
BBFFBBFRRL
FFBFFFFLLL
BBFBFFBRLR
FBFBFBBRLR
BBFFBBBRRR
FBFFBBBRLL
BFBFFBBRRR
BBFFFBFRLL
FBBFBBBLRL
FBBFFFFLRR
BBFFFBBLLL
FFBFFFFLRL
FBBFFBFLRL
FBBBBFFLLR
BFBBFBFRRR
FBBFFFBLLL
FFBFBFFRLL
FFFBBBFLRR
FFFBFFFLRR
FBFFBFFRRR
BFFFBFFLLR
BFFFFFFRLR
BFFFBFFLLL
FBBBFBBRRL
BFBFFFBLLL
FBFBBBBRRR
BFBBBFBRLR
BBFFFFBRLR
FBFFFFFRLL
FBBFFBBRLR
BBFBBFFLRR
BBFFBFFLLR
BBFFBBFRLL
FBFFFFFRRL
FFBFBBFRRR
FFBFFFFRLL
BFFFFBBLRR
BFBFBFBLRL
FBBFFFFRRR
FFBBFBBRRR
BFBBBBBRLR
FBFFFBBLLR
BBFFFBFRLR
FBFFFBBRRR
FBBFFBFRLR
BFFFBFBRRR
FFBBBBBLLL
FFFFFBFLLR
FBBFBFBRLL
BFBFBFBRRL
BBFFFFBRRL
FFBFBBFLLR
FFBBBFFRRL
FBFFBFBRLR
FBBFFFFRLL
BFFBFFFLLR
FBFFFBBLRR
BFFBFFFLLL
BFBFBBBRRR
BFFFFBFLRL
FFFFBFBLLL
FFFBFFBLLL
BFFFBBFRRL
BFBFBBFRLL
FFFBBBBLLL
BFFBFBBRLR
BFBBBBBLRR
BFBBBFBRRL
FFBFFFBRLR
BFFBFFFLRL
FFBFBBBLLL
BFBFBBFRRR
BFBFFBFRRR
FFBFFFBRLL
FBFFFFFLRL
BBFFBBFLLL
BFBFBBBRLL
FFFBFFFRRL
FBBBBBBLLR
FFFBFBBLRL
FBBFBBFRLL
FFBFFFFRRR
FFFBBBFLLR
BFFBBFFRLR
FFFFFBFLRR
FFFBBBBLLR
FBFFBFBRRL
FBBFFFFLLL
FFFFFBFRRL
BFFBBBFRLL
FFFBBFFRLL
FFFBBFFLRR
FFFFBBFRLL
BFBBBBBRRR
BFFBFBFLLL
BBFBFBFLLR
FFBBBBFRLR
FFFBBBFRLL
BFBBBBFRRR
FBFBFFBRLR
FFBFBBFRRL
BBFFBBBRRL
FFBFBBFRLR
FFFFBFFRLL
FBFFFBBRLL
BBFFBFBRRL
BFBFBFBLLR
FBFBFBBLRL
FBBFFFFRRL
FFFBBFFRRR
FFBBBBBLRR
BBFBFBBLRR
FFFFBBBLRR
FFBBBBBRLL
FFBFFFBRRL
BFBBFFFRLL
FBBBFBFRLL
BBFFBFFLRL
BBFFBFBRLR
BFFBBBBRRR
FBBBBBBRRL
BBFBFFFRLL
BFFBBFFRRR
BFBBFFFRRL
FFBFFBFLRR
FBFBBFFRLL
FBBFBBFRRL
BBFBBFFRRR
FFBBFBFRRL
FFBBFBFLLL
FBBFFFFLLR
BFBFFBBRLR
BFBBFFFLLR
FBBBFFFLLL
FFFBFFBLRR
FFFBFBFRLR
BFFBBBBRLR
FBFFBBBLLR
FFFFBBBRRR
FFBBBBFLLL
FBBBBFBLLR
BFBFBFFRRL
BBFFBBBLRR
FBBFFBFRRL
FFFBBBFLLL
BFFFFBBLLL
BBFBFBFRRR
BFBBBFBLRR
FBBFBBBLLR
FFBBBBFLRL
FFFBFFBLRL
FBBBFFBRRL
BFFBBFBRLL
BFBFBFBRRR
BBFBFBBRLL
FBFFFBFRLL
BFFFBFBLRR
BFBFFFFLRL
BBFFFFBLRR
BFBBFFBRRL
BBFBFBBLLR
FFFBBBFRRL
BFBBBFFRRL
FFBFFBFLLR
FFBBBFBLLL
FBFBBBFLLL
FFBBBBBRLR
BBFFBBBRLL
BFBFBBBRRL
FFBBFBBRLL
FBFBBFBLRL
BBFFBFBLLL
FBFBFFFLRL
FFBFFBBLRL
FFBFBBFLRL
BBFBFBBLLL
FFBBFBFRLL
BBFBBFFLLL
FBFFFFBLRL
FBFBBBFRLR
FFBFFBFRLL
FBBFFFBRRR
FBFBFFBLRL
BFFFFBBLLR
FBFBFBBRRR
BBFFBBFLRL
BFBBFFFRLR
FBFFFFFLLR
FBBFFBBLLL
FFFFFBBRRL
FFFBBFBRRL
BFFBBBBRRL
FBFFFBFLRL
FFBBFFFLLR
FBBBBBBLRR
BFFFBBFRLL
FFBFFFBLLR
FBBBFFFRLL
FFFFBBBLRL
BBFFBFBLRR
FFFFBBFLRR
BFFBFBFRLR
FFBFBBBLRL
FBFBFBFLLR
FFBBFBBRLR
BFBFBFFRRR
BBFFFFBRLL
FFBFBFFRRR
FFBFBBFLRR
BFBBFBFLRR
FFFFBBBLLR
FFBBBBBRRL
FBBFFBBRRR
FFFBBBBRLR
BFFBBBFLRL
BFBBFFBRRR
BBFFBBFRLR
FBBBBBFLRL
FFFBBFFLLL
BFBBBFFRLL
FBFFFFFLLL
FBFBBFBLLL
FFFBFFBRRR
BFBFBFFLLL
BFBFBFBLLL
BFBBBFFLLL
FFFFBBFRLR
BFFBBFBRRL
BFBBFBBLLL
FBBFBFBRLR
BFFFBFFLRL
FBFBBFFLRL
FFFFFBFLLL
FBBFFBFRRR
FBFBBBBLLL
FBBBBBFRLR
FBFFBBFRLL
FFBFFBFRRR
FFBFFFFRRL
BFFBFBBLLR
BFBBFBBRRR
FFBBFBBLRR
FBFFFFBRLR
FFBBBBFRLL
BBFFFBFRRR
FFFBFBBRRR
BFFFBFFRLL
BFFBBBBLRR
FBBBBFBLLL
BFFFFFFLLR
BFBFFFFLRR
BFFBBBBLLR
FFBBBFBRRR
FBBFBFFRRR
FBBFFFBRLR
BFBFBBFRLR
BFFBFFBRLL
FBFBBFBRLR
BFFFFFBLRR
BFFBFFBRRR
BFBFFBFLRL
BBFFFBFLLL
BBFBFBFLLL
BFBFBFFLRL
FBBFBFFLLL
FBFFBFBLLL
BFFFBFBRLR
FFFBFFFRLL
BBFBFFFLLL
BFFFBBBRLR
FBFBFBFLRR
FFBBBBFRRR
FBFBFBFRLR
BBFFBFFLLL
FBBBBFBLRR
FBBBBBFLLR
BFBFFFFRLL
FBFFFBFLRR
FFBFFFBLLL
BFBFFBBLLR
FFBBBFBLLR
FBFFFBBLRL
FFBBBFFRRR
FBBBFBFLLR
FBBBBFFLRR
FBFFBBBLLL
FFBFBFFLLR
FFFFFBBLLL
BFFFFFBLRL
BBFFFFBRRR
BFBFFFBRRL
BBFFFFFRRL
BFBBBBBLRL
FBBBBFBRLL
FFBFFFFLRR
BFBBBFFLLR
BFFFFBBRLR
FFBBFFBRRL
BFBFBFFRLR
FFBBBBFLRR
BFBFFBFLLL
FBBFFBBRRL
FFFBBFFLLR
FFFFBFFRRR
BFFBBBFRLR
BFFFFFBRRR
FFBFBFBLLR
FFFBBBFRRR
BBFBFBFRLR
FFBBFFBLLR
FBFBBBBLRL
FFFBFBFLRL
FFFFBBBRLL
FBFFFFBRRR
FFBBBFFRLL
FBFBFFBRRL
BFFBFFBLLL
FFFFFBFRLL
BBFFFBBRLL
FBBFBFBLRL
BFBFBFFLLR
BFBBFBBRLR
FFBFFFBLRR
BBFBFFFLRR
FBBFBBBLRR
FBBBFFBLLR
BFBBBBBRRL
BFBBFFBLLR
FBBBFBFLRR
BFFBFBBLLL
BFFBFFBLRL
BFBFBFBRLR
FBFFBBBLRR
FBFBBBBRRL
BFBFBBFLLL
FBFBBBBLRR
BFFBBFBRLR
FFFBFBFRRL
BFFFFBBRRR
FBFFBBFRLR
BFBBFBFLRL
BFFFBBBLLL
BFFFFFBRLR
BBFFFFBLRL
BFFBFFFRRR
BFBBBBFRLL
FBFBBFBRLL
FBBFFFBLLR
FFFBBFBRRR
FBFBBBBLLR
FFFFBFFLLL
FFFFFBFRLR
BFFFFBFRLR
FBBFFFBLRL
BFBFFBFLRR
FFFFFFBRLL
FFBBFFFLRL
BBFFFFBLLL
FFFBBFFRRL
FBBFBBFLLL
FBFFBFBLRR
FFBBFBBLLL
BFFFBBBRRR
BFFFBBBLLR
BBFBFBFRLL
BFFFBBFRLR
FFBFBBBRRL
FBFBFFFRRR
FBBBBBBRRR
FFBBBFFLRL
BFFBFBBRRL
BFBFBFFRLL
BFFFBFFRRL
BBFFBBBRLR
BBFFFFFRLL
FFBBFFBRRR
FBBFBFFLLR
FBBBFBBRLR
FFBFFBBRRL
FBBBFFBLLL
FBBFFFBRRL
BFFBFFFRRL
FBBFBFFRLR
BFFBBBBLRL
FFBFFBBRRR
FBFBBBFLRR
BFBBBBFRLR
FFFBFBFLLL
FBBBBBBRLL
FFBFFBBLRR
BBFFFFFLLR
FFFFBBFRRL
BBFFFFFRLR
FBFBFFBRLL
BBFFBFBRRR
FBFFFBFLLR
FFBBFBBLLR
FBFBFFFRLL
BFBBBFBRLL
FFFFFFBRLR
FFBBFFFRRL
BBFBBFFRLL
FBBFFFFRLR
BBFBBFFLRL
FBBFFBBLLR
BFFFBBFLLR
BBFBFBBRRL
BFFBFFBLLR
FFBBFBFRRR
FBBBBFBRLR
FFFBFBFLLR
FFBBBFBRRL
FFBBBFFLLL
FFBFBBBRLR
FBFBBFFLRR
FFFBFBBRRL
FFFFBFBRRR
FFFFBBBLLL
FFFBFBFLRR
BFBBBFBLLR
BFBFFFFRRL
BFBBFFBLRR
FFBFFBFRRL
BFBBFBFRRL
BFFFFFBRRL
FBBBBFFLLL
FFBFBBBLLR
FBBBFBFRLR
FFFBBFFRLR
BBFFBFBRLL
BBFBFBFRRL
FFBBBBFRRL
FBBBFBBLRR
BFFBFFBRLR
FFBBFFBRLR
FFBFBFBLRR
BFBFFFBLLR
BFFFBBFLRL
FBBBFBBRLL
BBFFFBFLLR
BBFFFBBRRL
BFBFFFBRLL
BFBFFFBLRR
FFBFBFFRLR
BFFFFFFRRL
BFFFBFFLRR
BFBBBBFLRL
FFFBFFFLLR
BFFFFFFLRR
BBFBBFFRRL
BFFFFFFLRL
FFFFBFBRLL
BFFBBFBLRR
FFFFBFFLRL
BBFFFFFLRL
FBBFBFBLRR
FBFBBFFRLR
FFFFFBBRRR
BFFFBFBRRL
FBFFBFBRRR
BBFFFBBLLR
BFFBFBBLRR
FFFBFBFRLL
FBFBBFFRRR
FFBFBBBRRR
BFBFFFBRLR
FBBFFFBRLL
FFBFBFBRRL
FFBBBFBLRL
FBBFBBBRRL
FBFFBFBRLL
BFBFBBFLRL
FFFBBBBLRR
BFFBFBBRLL
FFFBFFFRLR
FBFBFFBLLR
FBFFBBFLLL
FBBBFBBRRR
FBBFBBBRRR
FBFBBBFRRL
BFBBFBBRRL
BFBFBBBLRL
FBBFBBBRLR
FFBBFFBLRR
FBBFBFFLRL
FBFBFFBRRR
FFBBBBBLLR
BFBBFFFLRR
FFBBFBFLRR
BFBBBBFLLR
BFBFFBBRRL
FBFBBFFRRL
BFFFFFBLLL
FBBBBFBRRL
FBBBFFBRLL
BBFBFFFLLR
FFFBBFBLLL
BFFFBBBRLL
BFBFFBBLLL
BFBFBBBLLR
FBFFBBFLRL
FFFFBBFLRL
FBBFFFFLRL
FBBBBFFRRL
BFBBFBBLRR
BFBFBFBRLL
FBBBFBFLLL
FBFBBBBRLL
FBBBFFBLRR
FFBBFBFLRL
FFFFBFBLRL
FFBBBFFLRR
FFBBFFFRRR
FFBFFBBRLL
FFFFBFFRRL
FBBFFBFRLL
BFFFBBFLRR
BFBFFBBRLL
BFFBBFFLLL
FBBBBBBLLL
BFFBFBFRRR
BFBFFFFRLR
BFFBFBBLRL
BFBBBFBLRL
FBFBFBFRLL
FBBFBFFLRR
BFBBBFBLLL
BFFBBBFLRR
BFBBBBFLLL
BFBBFFBRLR
FFFBBFBLRR
FFFFBBFLLR
FFBFFBBLLR
FBFBBBFLLR
BFBBBFBRRR
BFFFFFBRLL
BBFBFFBRRL
BFBBFFBLLL
FFFBBBBRRL
FBFBBBFRRR
BFFBBFBLRL
BFFBFFFRLR
FFFFFBBLRR
FBFBFFFLLR
FFBFFFFRLR
FBFFFBFRRR
FBFBFBFRRR
FFBFBFBRLL
FFFFFFBRRL
FFBBBBBRRR
FFFBBFFLRL
BFFFBFBLLL
FBFFFFBLRR
FBBBBBBRLR
FBFBBFBRRL
FFBBFFBLLL
FBFFBBFRRR
FBFFFFBLLL
BBFBFFFRRL
FFFFBFBLLR
BFFBFBFLLR
BBFBFFBRRR
FBFFFFFRRR
FFBFBFFLRL
BFFBBFBLLR
FBBBFFFRRL
BFFBBFBRRR
BFBFBBFLRR
FBBBFFFRLR
FBBFBFBLLL
FBFBFBFLLL
BFBBFFFLRL
BBFFBBBLLR
BFFFFBBRRL
FFFBBFBLLR
BFFFFBFRLL
FFFFFBBLRL
FBFBBBFRLL
BFBFFBFRLL
FBFFBFFLLL
FBFBFBBLLR
FFFFBFBRLR
BFFFBFBLLR
BFFBFFBLRR
BFFFFBFLRR
FBBFFBBRLL
FFFFBBBRRL
FBBBFFBRRR
BFFBFBFRLL
BBFFBFBLRL
FFFBBFBLRL
BBFFFFBLLR
FBFFFFBRLL
BFBFBBBLLL
FBFBBFFLLR
FBBBFFFLRR`;

const getRow = (str) => {
  let mult = 64;
  let total = 0;
  for (let i = 0; i < 7; i++) {
    if (str[i] === 'B') {
      total += mult;
    }
    mult /= 2;
  }
  return total;
};

const getCol = (str) => {
  let mult = 4;
  let total = 0;
  for (let i = 0; i < 3; i++) {
    if (str[i] === 'R') {
      total += mult;
    }
    mult /= 2;
  }
  return total;
};

const getSeatID = (line) => {
  return 8 * getRow(line.slice(0, 7)) + getCol(line.slice(7, 10));
};

// console.log(getRow('FFFFFFF'));
// console.log(getRow('BFFFFFF'));
// console.log(getRow('FFFFFFB'));
// console.log(getRow('BBBBBBB'));

// console.log(getCol('LLL'));
// console.log(getCol('LRL'));
// console.log(getCol('RRR'));

// console.log(getSeatID('BFFFBBFRRR'), 'should be 567');

const rows = puzzle.split('\n');
let maxID = 0;
rows.forEach(row => {
  let thisSeatID = getSeatID(row);
  if (thisSeatID > maxID) {
    maxID = thisSeatID;
  }
});
console.log(maxID);
// 871 is correct
